#!/usr/bin/env ruby

ENV['RAILS_ENV'] ||= 'development'
require_relative '../config/environment'

def handle(message:)
  puts "Publishing message #{message.id}: #{message.name}"

  ActiveCampaignIntegration::MessageHandler.call(message: message)
  MailchimpIntegration::MessageHandler.call(message: message)

  puts "Published message #{message.id}: #{message.name}"
end

Signal.trap('INT') { exit }

loop do
  message = nil

  ActiveRecord::Base.transaction do
    message = Models::Message.where(status: Message::STATUS[:unpublished]).order(:created_at).lock(true).first
    message&.update!(status: Message::STATUS[:publishing])
  end

  if message
    begin
      handle(message: message)

      message.update!(status: Message::STATUS[:published])
    rescue StandardError => e
      message.update!(status: Message::STATUS[:failed])

      puts "An error occurred while handling message #{message.id}: #{e.message}"

      raise
    end
  else
    puts 'No events found, sleeping...'

    sleep 1
  end
end
